[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=7]
constant = Color( 0.51184, 0.9633, 0.115807, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=8]
constant = Color( 0.99455, 0.00301497, 0.969873, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=9]
constant = Color( 0.734046, 0.738281, 0.602737, 1 )

[sub_resource type="VisualShaderNodeIf" id=10]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 1e-05, 2, 0.0, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "normal"

[sub_resource type="VisualShader" id=6]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Input:7
	vec3 n_out7p0 = NORMAL;

// Color:4
	vec3 n_out4p0 = vec3(0.994550, 0.003015, 0.969873);
	float n_out4p1 = 1.000000;

// Color:3
	vec3 n_out3p0 = vec3(0.511840, 0.963300, 0.115807);
	float n_out3p1 = 1.000000;

// Color:5
	vec3 n_out5p0 = vec3(0.734046, 0.738281, 0.602737);
	float n_out5p1 = 1.000000;

// If:6
	float n_in6p1 = 0.00001;
	float n_in6p2 = 0.00000;
	vec3 n_out6p0;
	if(abs(dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333)) - n_in6p1) < n_in6p2)
	{
		n_out6p0 = n_out4p0;
	}
	else if(dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333)) < n_in6p1)
	{
		n_out6p0 = n_out5p0;
	}
	else
	{
		n_out6p0 = n_out3p0;
	}

// Output:0
	ALBEDO = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -194, 16 )
nodes/fragment/0/position = Vector2( 1000, 360 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( 20, 400 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( 220, 440 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( -60, 480 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( 760, 340 )
nodes/fragment/7/node = SubResource( 11 )
nodes/fragment/7/position = Vector2( 278, 253 )
nodes/fragment/connections = PoolIntArray( 3, 0, 6, 4, 5, 0, 6, 5, 6, 0, 0, 0, 4, 0, 6, 3, 7, 0, 6, 0 )

[resource]
shader = SubResource( 6 )
